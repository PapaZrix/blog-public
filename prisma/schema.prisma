// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String   @id @default(uuid())
  username       String
  email          String   @unique
  hashedPassword String
  image          String?
  about          String?
  locatedAt      String?
  joinedAt       DateTime @default(now())

  role        UserRole     @default(USER)
  comments    Comment[]
  posts       Post[]
  likes       Like[]
  collections Collection[]
}

enum UserRole {
  ADMIN
  USER
}

model Collection {
  id          String @id @default(uuid())
  name        String @unique
  thumbnail   String @db.Text()
  description String @db.Text()

  user   User   @relation(fields: [userId], references: [id])
  userId String
  posts  Post[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  summary   String   @db.Text
  content   String   @db.Text
  slug      String
  thumbnail String   @db.Text
  createdAt DateTime @default(now())
  part      Int?

  comments     Comment[]
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String?
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replyToId String?
  replies   Comment[] @relation("ReplyTo")

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  likes Like[]

  @@index([replyToId])
}

model Like {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@id([userId, commentId])
}
